/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.pravega.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StreamPosition extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5637786234026556303L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StreamPosition\",\"namespace\":\"io.pravega.avro\",\"fields\":[{\"name\":\"cycle\",\"type\":\"int\"},{\"name\":\"checkpoint\",\"type\":\"bytes\"},{\"name\":\"txnId\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StreamPosition> ENCODER =
      new BinaryMessageEncoder<StreamPosition>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StreamPosition> DECODER =
      new BinaryMessageDecoder<StreamPosition>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StreamPosition> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StreamPosition> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StreamPosition> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StreamPosition>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StreamPosition to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StreamPosition from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StreamPosition instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StreamPosition fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int cycle;
  @Deprecated public java.nio.ByteBuffer checkpoint;
  @Deprecated public java.lang.CharSequence txnId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StreamPosition() {}

  /**
   * All-args constructor.
   * @param cycle The new value for cycle
   * @param checkpoint The new value for checkpoint
   * @param txnId The new value for txnId
   */
  public StreamPosition(java.lang.Integer cycle, java.nio.ByteBuffer checkpoint, java.lang.CharSequence txnId) {
    this.cycle = cycle;
    this.checkpoint = checkpoint;
    this.txnId = txnId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cycle;
    case 1: return checkpoint;
    case 2: return txnId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cycle = (java.lang.Integer)value$; break;
    case 1: checkpoint = (java.nio.ByteBuffer)value$; break;
    case 2: txnId = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cycle' field.
   * @return The value of the 'cycle' field.
   */
  public int getCycle() {
    return cycle;
  }


  /**
   * Sets the value of the 'cycle' field.
   * @param value the value to set.
   */
  public void setCycle(int value) {
    this.cycle = value;
  }

  /**
   * Gets the value of the 'checkpoint' field.
   * @return The value of the 'checkpoint' field.
   */
  public java.nio.ByteBuffer getCheckpoint() {
    return checkpoint;
  }


  /**
   * Sets the value of the 'checkpoint' field.
   * @param value the value to set.
   */
  public void setCheckpoint(java.nio.ByteBuffer value) {
    this.checkpoint = value;
  }

  /**
   * Gets the value of the 'txnId' field.
   * @return The value of the 'txnId' field.
   */
  public java.lang.CharSequence getTxnId() {
    return txnId;
  }


  /**
   * Sets the value of the 'txnId' field.
   * @param value the value to set.
   */
  public void setTxnId(java.lang.CharSequence value) {
    this.txnId = value;
  }

  /**
   * Creates a new StreamPosition RecordBuilder.
   * @return A new StreamPosition RecordBuilder
   */
  public static io.pravega.avro.StreamPosition.Builder newBuilder() {
    return new io.pravega.avro.StreamPosition.Builder();
  }

  /**
   * Creates a new StreamPosition RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StreamPosition RecordBuilder
   */
  public static io.pravega.avro.StreamPosition.Builder newBuilder(io.pravega.avro.StreamPosition.Builder other) {
    if (other == null) {
      return new io.pravega.avro.StreamPosition.Builder();
    } else {
      return new io.pravega.avro.StreamPosition.Builder(other);
    }
  }

  /**
   * Creates a new StreamPosition RecordBuilder by copying an existing StreamPosition instance.
   * @param other The existing instance to copy.
   * @return A new StreamPosition RecordBuilder
   */
  public static io.pravega.avro.StreamPosition.Builder newBuilder(io.pravega.avro.StreamPosition other) {
    if (other == null) {
      return new io.pravega.avro.StreamPosition.Builder();
    } else {
      return new io.pravega.avro.StreamPosition.Builder(other);
    }
  }

  /**
   * RecordBuilder for StreamPosition instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StreamPosition>
    implements org.apache.avro.data.RecordBuilder<StreamPosition> {

    private int cycle;
    private java.nio.ByteBuffer checkpoint;
    private java.lang.CharSequence txnId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.pravega.avro.StreamPosition.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cycle)) {
        this.cycle = data().deepCopy(fields()[0].schema(), other.cycle);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.checkpoint)) {
        this.checkpoint = data().deepCopy(fields()[1].schema(), other.checkpoint);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.txnId)) {
        this.txnId = data().deepCopy(fields()[2].schema(), other.txnId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing StreamPosition instance
     * @param other The existing instance to copy.
     */
    private Builder(io.pravega.avro.StreamPosition other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.cycle)) {
        this.cycle = data().deepCopy(fields()[0].schema(), other.cycle);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.checkpoint)) {
        this.checkpoint = data().deepCopy(fields()[1].schema(), other.checkpoint);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.txnId)) {
        this.txnId = data().deepCopy(fields()[2].schema(), other.txnId);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'cycle' field.
      * @return The value.
      */
    public int getCycle() {
      return cycle;
    }


    /**
      * Sets the value of the 'cycle' field.
      * @param value The value of 'cycle'.
      * @return This builder.
      */
    public io.pravega.avro.StreamPosition.Builder setCycle(int value) {
      validate(fields()[0], value);
      this.cycle = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cycle' field has been set.
      * @return True if the 'cycle' field has been set, false otherwise.
      */
    public boolean hasCycle() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'cycle' field.
      * @return This builder.
      */
    public io.pravega.avro.StreamPosition.Builder clearCycle() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'checkpoint' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getCheckpoint() {
      return checkpoint;
    }


    /**
      * Sets the value of the 'checkpoint' field.
      * @param value The value of 'checkpoint'.
      * @return This builder.
      */
    public io.pravega.avro.StreamPosition.Builder setCheckpoint(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.checkpoint = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'checkpoint' field has been set.
      * @return True if the 'checkpoint' field has been set, false otherwise.
      */
    public boolean hasCheckpoint() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'checkpoint' field.
      * @return This builder.
      */
    public io.pravega.avro.StreamPosition.Builder clearCheckpoint() {
      checkpoint = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'txnId' field.
      * @return The value.
      */
    public java.lang.CharSequence getTxnId() {
      return txnId;
    }


    /**
      * Sets the value of the 'txnId' field.
      * @param value The value of 'txnId'.
      * @return This builder.
      */
    public io.pravega.avro.StreamPosition.Builder setTxnId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.txnId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'txnId' field has been set.
      * @return True if the 'txnId' field has been set, false otherwise.
      */
    public boolean hasTxnId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'txnId' field.
      * @return This builder.
      */
    public io.pravega.avro.StreamPosition.Builder clearTxnId() {
      txnId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StreamPosition build() {
      try {
        StreamPosition record = new StreamPosition();
        record.cycle = fieldSetFlags()[0] ? this.cycle : (java.lang.Integer) defaultValue(fields()[0]);
        record.checkpoint = fieldSetFlags()[1] ? this.checkpoint : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.txnId = fieldSetFlags()[2] ? this.txnId : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StreamPosition>
    WRITER$ = (org.apache.avro.io.DatumWriter<StreamPosition>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StreamPosition>
    READER$ = (org.apache.avro.io.DatumReader<StreamPosition>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.cycle);

    out.writeBytes(this.checkpoint);

    out.writeString(this.txnId);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.cycle = in.readInt();

      this.checkpoint = in.readBytes(this.checkpoint);

      this.txnId = in.readString(this.txnId instanceof Utf8 ? (Utf8)this.txnId : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.cycle = in.readInt();
          break;

        case 1:
          this.checkpoint = in.readBytes(this.checkpoint);
          break;

        case 2:
          this.txnId = in.readString(this.txnId instanceof Utf8 ? (Utf8)this.txnId : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










